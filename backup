from undetected_chromedriver import Chrome, ChromeOptions
from bs4 import BeautifulSoup

# Configure Chrome options
options = ChromeOptions()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

# Initialize Chrome driver
driver = Chrome(options=options)

# Set the URL to retrieve the HTML source code
url = 'https://www.mediamarkt.at/de/search.html?query=alexa&t=1685390066467'
# Open the URL in Chrome
driver.get(url)

# Get the HTML source code
html_source = driver.page_source

# Quit the driver
driver.quit()

# Parse the HTML source code
soup = BeautifulSoup(html_source, 'html.parser')

# Define keywords to search for
keywords = ['iphone', '€']

# Define tags to exclude from search
exclude_tags = ['body', 'head', 'header']

# Find all parent elements with more than 20 children, an even number of children, at least one <img> tag among its children,
# and exclude specified tags
parent_elements = soup.find_all(
    lambda tag: (
        len(tag.find_all(recursive=False)) >=10
        #and len(tag.find_all(recursive=False)) % 2 == 0
        and tag.find('img')
        and tag.name not in exclude_tags
    )
)
filtered_parent_elements = []

for parent in parent_elements:
    text = parent.text.lower()  # Convert text to lowercase for case-insensitive search
    if any(keyword in text for keyword in keywords):
        filtered_parent_elements.append(parent)

for parent in filtered_parent_elements:
    parent_tag = parent.name
    print(f"Parent Element (Tag: {parent_tag}):")

    suitable_children = []
    unsuitable_children = []

    for child in parent.children:
        if child.name == 'li' or child.name == 'div':
            if child.find('img') or '€' in child.text:
                if not child.find('input', {'type': 'checkbox'}):
                    suitable_children.append(child)
                else:
                    unsuitable_children.append(child)
            else:
                unsuitable_children.append(child)

    if len(suitable_children) > 1:
        print(f"  Child Text: {suitable_children[0]}")

